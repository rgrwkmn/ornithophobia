/**
 * Methods for interpreting Tiled map data into the game
 * intended to extend Phaser.State
 */
var TiledInterpreter = {
  preloadTilemap: function preloadTilemap(name, jsonLocation) {
    var _this = this;

    this.load.onFileComplete.add(function (progress, key) {
      if (key === name) {
        _this.preloadTilemapAssets(name);
      }
    });
    this.load.tilemap(name, jsonLocation, null, Phaser.Tilemap.TILED_JSON);
  },
  preloadTilemapAssets: function preloadTilemapAssets(name) {
    var _this2 = this;

    this.tilemap = this.cache.getTilemapData(name);
    console.log('preload tilemap assets', this.tilemap);
    // load tileset images
    this.tilemap.data.tilesets.forEach(function (set) {
      console.log('load tiles', 'assets/' + set.image.replace(/(\.\.\/)+/, ''));
      // TODO fix this set.image.replace regex hack, this is essentially hard coded
      _this2.load.image(set.name, 'assets/' + set.image.replace(/(\.\.\/)+/, ''));
    });
    console.log('load object sprites');
    // load object sprites
    this.getSpritesFromTilemap(this.tilemap).forEach(function (object) {
      console.log('load sprite', 'assets/' + object.properties.sprite.replace(/(\.\.\/)+/, ''));
      _this2.load.spritesheet(object.properties.sprite, 'assets/' + object.properties.sprite.replace(/(\.\.\/)+/, ''), object.width, object.height);
    });
  },
  getSpritesFromTilemap: function getSpritesFromTilemap(tilemap) {
    var objectsBySpriteMap = tilemap.data.layers.reduce(function (objectsBySprite, layer) {
      if (layer.objects) {
        layer.objects.forEach(function (object) {
          if (object.properties && object.properties.sprite && !objectsBySprite[object.properties.sprite]) {
            objectsBySprite[object.properties.sprite] = object;
          }
        });
      }
      return objectsBySprite;
    }, {});
    console.log('objectsBySpriteMap', objectsBySpriteMap);
    return Object.keys(objectsBySpriteMap).map(function (key) {
      return objectsBySpriteMap[key];
    });
  },
  createTilemap: function createTilemap(name) {
    var map = this.game.add.tilemap(name);
    console.log('map', map);
    this.tilemap.data.tilesets.forEach(function (set) {
      map.addTilesetImage(set.name, set.name, set.tilewidth, set.tileheight);
    });

    return map;
  },
  initiateTiledObjectGroups: function initiateTiledObjectGroups(map) {
    var _this3 = this;

    // TODO need more data about objects/entities in tiled in order to do this
    var groups = {};
    var objectsByType = this.arrangeObjectsByType(map.objects);
    Object.keys(objectsByType).forEach(function (type) {
      groups[type] = _this3.game.add.group();
      groups[type].enableBody = true;
      objectsByType[type].forEach(function (item) {
        return _this3.createSpriteFromTiledObject(item, groups[type]);
      });
    });
    return groups;
  },
  arrangeObjectsByType: function arrangeObjectsByType(objects) {
    return objects.reduce(function (objects, object) {
      if (object.type) {
        if (!objects[object.type]) {
          objects[object.type] = [];
        }
        objects[object.type].push(object);
      } else {
        console.warn('object found without type', object.name, object);
      }
      console.log(objects);
      return objects;
    }, {});
  },
  getObjectsFromTilemap: function getObjectsFromTilemap(tilemap) {
    return tilemap.data.layers.reduce(function (objects, layer) {
      if (layer.objects) {
        objects = objects.concat(layer.objects);
      }
      return objects;
    }, []);
  },

  /**
   * Creates a Phaser sprite in a sprite group from a Tiled object
   * @param  {object} object The Tiled object
   * @param  {group} group   The Phaser sprite group
   * @return {Sprite}        The Phaser sprite
   */
  createSpriteFromTiledObject: function createSpriteFromTiledObject(object, group) {
    if (!object.properties || !object.properties.sprite) {
      console.error('no sprite defined for object', object);
      return;
    }
    console.log('create sprite', object);
    var sprite = group.create(object.x, object.y - object.height, object.properties.sprite);
    sprite.gameData = {
      name: object.name,
      type: object.type
    };
    Object.assign(sprite.gameData, object.properties);
    return sprite;
  }
};

export default TiledInterpreter;
//# sourceMappingURL=data:application/json;base64,