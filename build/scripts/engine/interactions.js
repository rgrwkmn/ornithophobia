export function tellPlayer(data) {
  console.log('ðŸ“œ', data.message);
}

export function collect(entity, item) {
  if (!entity.inventory) {
    entity.inventory = [];
  }
  entity.inventory.push(item.gameData);
  tellPlayer({ message: 'You collected the ' + item.gameData.displayName });
  item.destroy();
}

export function consume(entity, item) {
  tellPlayer({ message: 'You consumed the ' + item.gameData.displayName });
  item.destroy();
}

export function knockDoor(entity, door) {
  if (!door.gameData || !door.gameData.key) {
    console.warn('door ' + door.gameData.name + ' doesn\'t have no damn KEY', door);
    return;
  }

  if (entity.inventory) {
    var item = entity.inventory.find(function (item) {
      return item.type === 'Key' && item.id === door.gameData.key;
    });
    if (item) {
      door.destroy();
      tellPlayer({ message: 'you used the ' + item.displayName + ' key on the door and it opened' });
      return;
    }
  }
  tellPlayer({ message: 'need some key for this door idiot' });
}

export function gateCanOpen(gate) {
  return gate.gameData.openDirection === 'north' && gate.body.touching.up || gate.gameData.openDirection === 'south' && gate.body.touching.down || gate.gameData.openDirection === 'west' && gate.body.touching.left || gate.gameData.openDirection === 'east' && gate.body.touching.right;
}

export function knockGate(entity, gate) {
  if (!gate.gameData || !gate.gameData.openDirection) {
    console.warn('gate ' + gate.gameData.name + ' ain\'t got no openDirection', gate);
    return;
  }
  if (gateCanOpen(gate)) {
    gate.destroy();
    tellPlayer({ message: 'the gate has a handle on this side, you opened it' });
  } else {
    tellPlayer({ message: 'the gate does not open from this side' });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2VuZ2luZS9pbnRlcmFjdGlvbnMuanMiXSwibmFtZXMiOlsidGVsbFBsYXllciIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZSIsImNvbGxlY3QiLCJlbnRpdHkiLCJpdGVtIiwiaW52ZW50b3J5IiwicHVzaCIsImdhbWVEYXRhIiwiZGlzcGxheU5hbWUiLCJkZXN0cm95IiwiY29uc3VtZSIsImtub2NrRG9vciIsImRvb3IiLCJrZXkiLCJ3YXJuIiwibmFtZSIsImZpbmQiLCJ0eXBlIiwiaWQiLCJnYXRlQ2FuT3BlbiIsImdhdGUiLCJvcGVuRGlyZWN0aW9uIiwiYm9keSIsInRvdWNoaW5nIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0Iiwia25vY2tHYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVNBLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQy9CQyxVQUFRQyxHQUFSLENBQVksSUFBWixFQUFrQkYsS0FBS0csT0FBdkI7QUFDRDs7QUFFRCxPQUFPLFNBQVNDLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCQyxJQUF6QixFQUErQjtBQUNwQyxNQUFJLENBQUNELE9BQU9FLFNBQVosRUFBdUI7QUFDckJGLFdBQU9FLFNBQVAsR0FBbUIsRUFBbkI7QUFDRDtBQUNERixTQUFPRSxTQUFQLENBQWlCQyxJQUFqQixDQUFzQkYsS0FBS0csUUFBM0I7QUFDQVYsYUFBVyxFQUFFSSxnQ0FBOEJHLEtBQUtHLFFBQUwsQ0FBY0MsV0FBOUMsRUFBWDtBQUNBSixPQUFLSyxPQUFMO0FBQ0Q7O0FBRUQsT0FBTyxTQUFTQyxPQUFULENBQWlCUCxNQUFqQixFQUF5QkMsSUFBekIsRUFBK0I7QUFDcENQLGFBQVcsRUFBRUksK0JBQTZCRyxLQUFLRyxRQUFMLENBQWNDLFdBQTdDLEVBQVg7QUFDQUosT0FBS0ssT0FBTDtBQUNEOztBQUVELE9BQU8sU0FBU0UsU0FBVCxDQUFtQlIsTUFBbkIsRUFBMkJTLElBQTNCLEVBQWlDO0FBQ3RDLE1BQUksQ0FBQ0EsS0FBS0wsUUFBTixJQUFrQixDQUFDSyxLQUFLTCxRQUFMLENBQWNNLEdBQXJDLEVBQTBDO0FBQ3hDZCxZQUFRZSxJQUFSLFdBQXFCRixLQUFLTCxRQUFMLENBQWNRLElBQW5DLGlDQUFvRUgsSUFBcEU7QUFDQTtBQUNEOztBQUVELE1BQUlULE9BQU9FLFNBQVgsRUFBc0I7QUFDcEIsUUFBTUQsT0FBT0QsT0FBT0UsU0FBUCxDQUFpQlcsSUFBakIsQ0FDWDtBQUFBLGFBQVFaLEtBQUthLElBQUwsS0FBYyxLQUFkLElBQXVCYixLQUFLYyxFQUFMLEtBQVlOLEtBQUtMLFFBQUwsQ0FBY00sR0FBekQ7QUFBQSxLQURXLENBQWI7QUFHQSxRQUFJVCxJQUFKLEVBQVU7QUFDUlEsV0FBS0gsT0FBTDtBQUNBWixpQkFBVyxFQUFFSSwyQkFBeUJHLEtBQUtJLFdBQTlCLG1DQUFGLEVBQVg7QUFDQTtBQUNEO0FBQ0Y7QUFDRFgsYUFBVyxFQUFFSSxTQUFTLG1DQUFYLEVBQVg7QUFDRDs7QUFFRCxPQUFPLFNBQVNrQixXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUNoQyxTQUNFQSxLQUFLYixRQUFMLENBQWNjLGFBQWQsS0FBZ0MsT0FBaEMsSUFBMkNELEtBQUtFLElBQUwsQ0FBVUMsUUFBVixDQUFtQkMsRUFBOUQsSUFDR0osS0FBS2IsUUFBTCxDQUFjYyxhQUFkLEtBQWdDLE9BQWhDLElBQTJDRCxLQUFLRSxJQUFMLENBQVVDLFFBQVYsQ0FBbUJFLElBRGpFLElBRUdMLEtBQUtiLFFBQUwsQ0FBY2MsYUFBZCxLQUFnQyxNQUFoQyxJQUEwQ0QsS0FBS0UsSUFBTCxDQUFVQyxRQUFWLENBQW1CRyxJQUZoRSxJQUdHTixLQUFLYixRQUFMLENBQWNjLGFBQWQsS0FBZ0MsTUFBaEMsSUFBMENELEtBQUtFLElBQUwsQ0FBVUMsUUFBVixDQUFtQkksS0FKbEU7QUFNRDs7QUFFRCxPQUFPLFNBQVNDLFNBQVQsQ0FBbUJ6QixNQUFuQixFQUEyQmlCLElBQTNCLEVBQWlDO0FBQ3RDLE1BQUksQ0FBQ0EsS0FBS2IsUUFBTixJQUFrQixDQUFDYSxLQUFLYixRQUFMLENBQWNjLGFBQXJDLEVBQW9EO0FBQ2xEdEIsWUFBUWUsSUFBUixXQUFxQk0sS0FBS2IsUUFBTCxDQUFjUSxJQUFuQyxtQ0FBc0VLLElBQXRFO0FBQ0E7QUFDRDtBQUNELE1BQUlELFlBQVlDLElBQVosQ0FBSixFQUF1QjtBQUNyQkEsU0FBS1gsT0FBTDtBQUNBWixlQUFXLEVBQUVJLFNBQVMsbURBQVgsRUFBWDtBQUNELEdBSEQsTUFHTztBQUNMSixlQUFXLEVBQUVJLFNBQVMsdUNBQVgsRUFBWDtBQUNEO0FBQ0YiLCJmaWxlIjoiaW50ZXJhY3Rpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRlbGxQbGF5ZXIoZGF0YSkge1xuICBjb25zb2xlLmxvZygn8J+TnCcsIGRhdGEubWVzc2FnZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0KGVudGl0eSwgaXRlbSkge1xuICBpZiAoIWVudGl0eS5pbnZlbnRvcnkpIHtcbiAgICBlbnRpdHkuaW52ZW50b3J5ID0gW107XG4gIH1cbiAgZW50aXR5LmludmVudG9yeS5wdXNoKGl0ZW0uZ2FtZURhdGEpO1xuICB0ZWxsUGxheWVyKHsgbWVzc2FnZTogYFlvdSBjb2xsZWN0ZWQgdGhlICR7aXRlbS5nYW1lRGF0YS5kaXNwbGF5TmFtZX1gIH0pO1xuICBpdGVtLmRlc3Ryb3koKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWUoZW50aXR5LCBpdGVtKSB7XG4gIHRlbGxQbGF5ZXIoeyBtZXNzYWdlOiBgWW91IGNvbnN1bWVkIHRoZSAke2l0ZW0uZ2FtZURhdGEuZGlzcGxheU5hbWV9YCB9KTtcbiAgaXRlbS5kZXN0cm95KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBrbm9ja0Rvb3IoZW50aXR5LCBkb29yKSB7XG4gIGlmICghZG9vci5nYW1lRGF0YSB8fCAhZG9vci5nYW1lRGF0YS5rZXkpIHtcbiAgICBjb25zb2xlLndhcm4oYGRvb3IgJHtkb29yLmdhbWVEYXRhLm5hbWV9IGRvZXNuJ3QgaGF2ZSBubyBkYW1uIEtFWWAsIGRvb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbnRpdHkuaW52ZW50b3J5KSB7XG4gICAgY29uc3QgaXRlbSA9IGVudGl0eS5pbnZlbnRvcnkuZmluZChcbiAgICAgIGl0ZW0gPT4gaXRlbS50eXBlID09PSAnS2V5JyAmJiBpdGVtLmlkID09PSBkb29yLmdhbWVEYXRhLmtleVxuICAgICk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGRvb3IuZGVzdHJveSgpO1xuICAgICAgdGVsbFBsYXllcih7IG1lc3NhZ2U6IGB5b3UgdXNlZCB0aGUgJHtpdGVtLmRpc3BsYXlOYW1lfSBrZXkgb24gdGhlIGRvb3IgYW5kIGl0IG9wZW5lZGAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHRlbGxQbGF5ZXIoeyBtZXNzYWdlOiAnbmVlZCBzb21lIGtleSBmb3IgdGhpcyBkb29yIGlkaW90JyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhdGVDYW5PcGVuKGdhdGUpIHtcbiAgcmV0dXJuIChcbiAgICBnYXRlLmdhbWVEYXRhLm9wZW5EaXJlY3Rpb24gPT09ICdub3J0aCcgJiYgZ2F0ZS5ib2R5LnRvdWNoaW5nLnVwXG4gICAgfHwgZ2F0ZS5nYW1lRGF0YS5vcGVuRGlyZWN0aW9uID09PSAnc291dGgnICYmIGdhdGUuYm9keS50b3VjaGluZy5kb3duXG4gICAgfHwgZ2F0ZS5nYW1lRGF0YS5vcGVuRGlyZWN0aW9uID09PSAnd2VzdCcgJiYgZ2F0ZS5ib2R5LnRvdWNoaW5nLmxlZnRcbiAgICB8fCBnYXRlLmdhbWVEYXRhLm9wZW5EaXJlY3Rpb24gPT09ICdlYXN0JyAmJiBnYXRlLmJvZHkudG91Y2hpbmcucmlnaHRcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtub2NrR2F0ZShlbnRpdHksIGdhdGUpIHtcbiAgaWYgKCFnYXRlLmdhbWVEYXRhIHx8ICFnYXRlLmdhbWVEYXRhLm9wZW5EaXJlY3Rpb24pIHtcbiAgICBjb25zb2xlLndhcm4oYGdhdGUgJHtnYXRlLmdhbWVEYXRhLm5hbWV9IGFpbid0IGdvdCBubyBvcGVuRGlyZWN0aW9uYCwgZ2F0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChnYXRlQ2FuT3BlbihnYXRlKSkge1xuICAgIGdhdGUuZGVzdHJveSgpO1xuICAgIHRlbGxQbGF5ZXIoeyBtZXNzYWdlOiAndGhlIGdhdGUgaGFzIGEgaGFuZGxlIG9uIHRoaXMgc2lkZSwgeW91IG9wZW5lZCBpdCcgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGVsbFBsYXllcih7IG1lc3NhZ2U6ICd0aGUgZ2F0ZSBkb2VzIG5vdCBvcGVuIGZyb20gdGhpcyBzaWRlJyB9KTtcbiAgfVxufVxuIl19