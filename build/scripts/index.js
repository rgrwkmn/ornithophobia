import 'babel-polyfill';

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

var player = void 0;
var platforms = void 0;

function preload() {
  game.load.image('sky', 'assets/sky.png');
  game.load.image('ground', 'assets/platform.png');
  game.load.image('star', 'assets/star.png');
  game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
}

function create() {
  //  We're going to be using physics, so enable the Arcade Physics system
  game.physics.startSystem(Phaser.Physics.ARCADE);

  //  A simple background for our game
  game.add.sprite(0, 0, 'sky');

  //  The platforms group contains the ground and the 2 ledges we can jump on
  platforms = game.add.group();

  //  We will enable physics for any object that is created in this group
  platforms.enableBody = true;

  // Here we create the ground.
  var ground = platforms.create(0, game.world.height - 64, 'ground');

  //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
  ground.scale.setTo(2, 2);

  //  This stops it from falling away when you jump on it
  ground.body.immovable = true;

  //  Now let's create two ledges
  var ledge = platforms.create(400, 400, 'ground');

  ledge.body.immovable = true;

  ledge = platforms.create(-150, 250, 'ground');

  ledge.body.immovable = true;

  // The player and its settings
  player = game.add.sprite(32, game.world.height - 150, 'dude');

  //  We need to enable physics on the player
  game.physics.arcade.enable(player);

  //  Player physics properties. Give the little guy a slight bounce.
  player.body.bounce.y = 0.2;
  player.body.gravity.y = 300;
  player.body.collideWorldBounds = true;

  //  Our two animations, walking left and right.
  player.animations.add('left', [0, 1, 2, 3], 10, true);
  player.animations.add('right', [5, 6, 7, 8], 10, true);
}

function update() {
  //  Collide the player and the stars with the platforms
  game.physics.arcade.collide(player, platforms);

  var cursors = game.input.keyboard.createCursorKeys();

  //  Reset the players velocity (movement)
  player.body.velocity.x = 0;

  if (cursors.left.isDown) {
    //  Move to the left
    player.body.velocity.x = -150;

    player.animations.play('left');
  } else if (cursors.right.isDown) {
    //  Move to the right
    player.body.velocity.x = 150;

    player.animations.play('right');
  } else {
    //  Stand still
    player.animations.stop();

    player.frame = 4;
  }

  //  Allow the player to jump if they are touching the ground.
  if (cursors.up.isDown && player.body.touching.down) {
    player.body.velocity.y = -350;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbImdhbWUiLCJQaGFzZXIiLCJHYW1lIiwiQVVUTyIsInByZWxvYWQiLCJjcmVhdGUiLCJ1cGRhdGUiLCJwbGF5ZXIiLCJwbGF0Zm9ybXMiLCJsb2FkIiwiaW1hZ2UiLCJzcHJpdGVzaGVldCIsInBoeXNpY3MiLCJzdGFydFN5c3RlbSIsIlBoeXNpY3MiLCJBUkNBREUiLCJhZGQiLCJzcHJpdGUiLCJncm91cCIsImVuYWJsZUJvZHkiLCJncm91bmQiLCJ3b3JsZCIsImhlaWdodCIsInNjYWxlIiwic2V0VG8iLCJib2R5IiwiaW1tb3ZhYmxlIiwibGVkZ2UiLCJhcmNhZGUiLCJlbmFibGUiLCJib3VuY2UiLCJ5IiwiZ3Jhdml0eSIsImNvbGxpZGVXb3JsZEJvdW5kcyIsImFuaW1hdGlvbnMiLCJjb2xsaWRlIiwiY3Vyc29ycyIsImlucHV0Iiwia2V5Ym9hcmQiLCJjcmVhdGVDdXJzb3JLZXlzIiwidmVsb2NpdHkiLCJ4IiwibGVmdCIsImlzRG93biIsInBsYXkiLCJyaWdodCIsInN0b3AiLCJmcmFtZSIsInVwIiwidG91Y2hpbmciLCJkb3duIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGdCQUFQOztBQUVBLElBQU1BLE9BQU8sSUFBSUMsT0FBT0MsSUFBWCxDQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQkQsT0FBT0UsSUFBakMsRUFBdUMsRUFBdkMsRUFBMkMsRUFBRUMsU0FBU0EsT0FBWCxFQUFvQkMsUUFBUUEsTUFBNUIsRUFBb0NDLFFBQVFBLE1BQTVDLEVBQTNDLENBQWI7O0FBRUEsSUFBSUMsZUFBSjtBQUNBLElBQUlDLGtCQUFKOztBQUVBLFNBQVNKLE9BQVQsR0FBbUI7QUFDakJKLE9BQUtTLElBQUwsQ0FBVUMsS0FBVixDQUFnQixLQUFoQixFQUF1QixnQkFBdkI7QUFDQVYsT0FBS1MsSUFBTCxDQUFVQyxLQUFWLENBQWdCLFFBQWhCLEVBQTBCLHFCQUExQjtBQUNBVixPQUFL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Y0YsTUFBbEIsRUFBMEI7QUFDL0I7QUFDQXBDLFdBQU9rQixJQUFQLENBQVllLFFBQVosQ0FBcUJDLENBQXJCLEdBQXlCLEdBQXpCOztBQUVBbEMsV0FBTzJCLFVBQVAsQ0FBa0JVLElBQWxCLENBQXVCLE9BQXZCO0FBQ0QsR0FMTSxNQUtBO0FBQ0w7QUFDQXJDLFdBQU8yQixVQUFQLENBQWtCWSxJQUFsQjs7QUFFQXZDLFdBQU93QyxLQUFQLEdBQWUsQ0FBZjtBQUNEOztBQUVEO0FBQ0EsTUFBSVgsUUFBUVksRUFBUixDQUFXTCxNQUFYLElBQXFCcEMsT0FBT2tCLElBQVAsQ0FBWXdCLFFBQVosQ0FBcUJDLElBQTlDLEVBQW9EO0FBQ2xEM0MsV0FBT2tCLElBQVAsQ0FBWWUsUUFBWixDQUFxQlQsQ0FBckIsR0FBeUIsQ0FBQyxHQUExQjtBQUNEO0FBQ0YiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcblxuY29uc3QgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICcnLCB7IHByZWxvYWQ6IHByZWxvYWQsIGNyZWF0ZTogY3JlYXRlLCB1cGRhdGU6IHVwZGF0ZSB9KTtcblxubGV0IHBsYXllcjtcbmxldCBwbGF0Zm9ybXM7XG5cbmZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gIGdhbWUubG9hZC5pbWFnZSgnc2t5JywgJ2Fzc2V0cy9za3kucG5nJyk7XG4gIGdhbWUubG9hZC5pbWFnZSgnZ3JvdW5kJywgJ2Fzc2V0cy9wbGF0Zm9ybS5wbmcnKTtcbiAgZ2FtZS5sb2FkLmltYWdlKCdzdGFyJywgJ2Fzc2V0cy9zdGFyLnBuZycpO1xuICBnYW1lLmxvYWQuc3ByaXRlc2hlZXQoJ2R1ZGUnLCAnYXNzZXRzL2R1ZGUucG5nJywgMzIsIDQ4KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICAvLyAgV2UncmUgZ29pbmcgdG8gYmUgdXNpbmcgcGh5c2ljcywgc28gZW5hYmxlIHRoZSBBcmNhZGUgUGh5c2ljcyBzeXN0ZW1cbiAgZ2FtZS5waHlzaWNzLnN0YXJ0U3lzdGVtKFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XG5cbiAgLy8gIEEgc2ltcGxlIGJhY2tncm91bmQgZm9yIG91ciBnYW1lXG4gIGdhbWUuYWRkLnNwcml0ZSgwLCAwLCAnc2t5Jyk7XG5cbiAgLy8gIFRoZSBwbGF0Zm9ybXMgZ3JvdXAgY29udGFpbnMgdGhlIGdyb3VuZCBhbmQgdGhlIDIgbGVkZ2VzIHdlIGNhbiBqdW1wIG9uXG4gIHBsYXRmb3JtcyA9IGdhbWUuYWRkLmdyb3VwKCk7XG5cbiAgLy8gIFdlIHdpbGwgZW5hYmxlIHBoeXNpY3MgZm9yIGFueSBvYmplY3QgdGhhdCBpcyBjcmVhdGVkIGluIHRoaXMgZ3JvdXBcbiAgcGxhdGZvcm1zLmVuYWJsZUJvZHkgPSB0cnVlO1xuXG4gIC8vIEhlcmUgd2UgY3JlYXRlIHRoZSBncm91bmQuXG4gIGNvbnN0IGdyb3VuZCA9IHBsYXRmb3Jtcy5jcmVhdGUoMCwgZ2FtZS53b3JsZC5oZWlnaHQgLSA2NCwgJ2dyb3VuZCcpO1xuXG4gIC8vICBTY2FsZSBpdCB0byBmaXQgdGhlIHdpZHRoIG9mIHRoZSBnYW1lICh0aGUgb3JpZ2luYWwgc3ByaXRlIGlzIDQwMHgzMiBpbiBzaXplKVxuICBncm91bmQuc2NhbGUuc2V0VG8oMiwgMik7XG5cbiAgLy8gIFRoaXMgc3RvcHMgaXQgZnJvbSBmYWxsaW5nIGF3YXkgd2hlbiB5b3UganVtcCBvbiBpdFxuICBncm91bmQuYm9keS5pbW1vdmFibGUgPSB0cnVlO1xuXG4gIC8vICBOb3cgbGV0J3MgY3JlYXRlIHR3byBsZWRnZXNcbiAgbGV0IGxlZGdlID0gcGxhdGZvcm1zLmNyZWF0ZSg0MDAsIDQwMCwgJ2dyb3VuZCcpO1xuXG4gIGxlZGdlLmJvZHkuaW1tb3ZhYmxlID0gdHJ1ZTtcblxuICBsZWRnZSA9IHBsYXRmb3Jtcy5jcmVhdGUoLTE1MCwgMjUwLCAnZ3JvdW5kJyk7XG5cbiAgbGVkZ2UuYm9keS5pbW1vdmFibGUgPSB0cnVlO1xuXG4gIC8vIFRoZSBwbGF5ZXIgYW5kIGl0cyBzZXR0aW5nc1xuICBwbGF5ZXIgPSBnYW1lLmFkZC5zcHJpdGUoMzIsIGdhbWUud29ybGQuaGVpZ2h0IC0gMTUwLCAnZHVkZScpO1xuXG4gIC8vICBXZSBuZWVkIHRvIGVuYWJsZSBwaHlzaWNzIG9uIHRoZSBwbGF5ZXJcbiAgZ2FtZS5waHlzaWNzLmFyY2FkZS5lbmFibGUocGxheWVyKTtcblxuICAvLyAgUGxheWVyIHBoeXNpY3MgcHJvcGVydGllcy4gR2l2ZSB0aGUgbGl0dGxlIGd1eSBhIHNsaWdodCBib3VuY2UuXG4gIHBsYXllci5ib2R5LmJvdW5jZS55ID0gMC4yO1xuICBwbGF5ZXIuYm9keS5ncmF2aXR5LnkgPSAzMDA7XG4gIHBsYXllci5ib2R5LmNvbGxpZGVXb3JsZEJvdW5kcyA9IHRydWU7XG5cbiAgLy8gIE91ciB0d28gYW5pbWF0aW9ucywgd2Fsa2luZyBsZWZ0IGFuZCByaWdodC5cbiAgcGxheWVyLmFuaW1hdGlvbnMuYWRkKCdsZWZ0JywgWzAsIDEsIDIsIDNdLCAxMCwgdHJ1ZSk7XG4gIHBsYXllci5hbmltYXRpb25zLmFkZCgncmlnaHQnLCBbNSwgNiwgNywgOF0sIDEwLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyAgQ29sbGlkZSB0aGUgcGxheWVyIGFuZCB0aGUgc3RhcnMgd2l0aCB0aGUgcGxhdGZvcm1zXG4gIGdhbWUucGh5c2ljcy5hcmNhZGUuY29sbGlkZShwbGF5ZXIsIHBsYXRmb3Jtcyk7XG5cbiAgY29uc3QgY3Vyc29ycyA9IGdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpO1xuXG4gIC8vICBSZXNldCB0aGUgcGxheWVycyB2ZWxvY2l0eSAobW92ZW1lbnQpXG4gIHBsYXllci5ib2R5LnZlbG9jaXR5LnggPSAwO1xuXG4gIGlmIChjdXJzb3JzLmxlZnQuaXNEb3duKSB7XG4gICAgLy8gIE1vdmUgdG8gdGhlIGxlZnRcbiAgICBwbGF5ZXIuYm9keS52ZWxvY2l0eS54ID0gLTE1MDtcblxuICAgIHBsYXllci5hbmltYXRpb25zLnBsYXkoJ2xlZnQnKTtcbiAgfSBlbHNlIGlmIChjdXJzb3JzLnJpZ2h0LmlzRG93bikge1xuICAgIC8vICBNb3ZlIHRvIHRoZSByaWdodFxuICAgIHBsYXllci5ib2R5LnZlbG9jaXR5LnggPSAxNTA7XG5cbiAgICBwbGF5ZXIuYW5pbWF0aW9ucy5wbGF5KCdyaWdodCcpO1xuICB9IGVsc2Uge1xuICAgIC8vICBTdGFuZCBzdGlsbFxuICAgIHBsYXllci5hbmltYXRpb25zLnN0b3AoKTtcblxuICAgIHBsYXllci5mcmFtZSA9IDQ7XG4gIH1cblxuICAvLyAgQWxsb3cgdGhlIHBsYXllciB0byBqdW1wIGlmIHRoZXkgYXJlIHRvdWNoaW5nIHRoZSBncm91bmQuXG4gIGlmIChjdXJzb3JzLnVwLmlzRG93biAmJiBwbGF5ZXIuYm9keS50b3VjaGluZy5kb3duKSB7XG4gICAgcGxheWVyLmJvZHkudmVsb2NpdHkueSA9IC0zNTA7XG4gIH1cbn1cbiJdfQ==